#!/usr/bin/env python3

import argparse
import re
from subprocess import check_output
from pathlib import Path
from typing import List

def identify(path: Path) -> List[str]:
    strings = check_output(f"strings {path}", shell=True).decode().split("\n")
    # 1. lets see if we can find a clean semver version #.#, #.#.# and #.#.#.#
    version_candidates = list(filter(lambda s: re.match(r"^\d+\.\d+$|^\d+\.\d+\.\d+$|^\d+\.\d+\.\d+\.\d+$|^\d+\.\d+\.\d+-[0-9a-z.]+$", s), strings))
    version_candidates.extend(
        [s.split(" version ", maxsplit=2)[1].split(" ")[0] for s in filter(lambda s: re.match(r".+ version \d+\.\d+\..+ ", s), strings)]
    )
    version_candidates.extend(
        [s[1:] for s in filter(lambda s: re.match(r"^v\d+\.\d+\.\d+$", s), strings)]
    )
    # identifies my python3 as having one of versions ['3.12.3', '255.255.255.255', '15.0.0', '3.2.0', '2047.984375']
    # TODO consider versions such as 1.2.3b, 1.2.3-32, 1.2.3-alpha, 1.2.3-rc7 and 5.2.21(1)-release etc
    name_candidates = [s.split(" ")[0].lower() for s in filter(lambda s: re.match(r"^\w+ %s$", s), strings)]
    name_candidates.extend([
        path.name,
        re.split(r"[0-9-]", path.name)[0],
    ])
    for s in strings:
        if re.match(r"^\w+ \d+\.\d+\.\d+.* ", s):
            parts = s.split(" ")[:2]
            name_candidates.extend([parts[0].lower()])
            version_candidates.extend([parts[1]])
    # TODO select top candidates first
    # TODO match against actual identifiers
    # TODO prefer non "*.*" names. Eg. libreoffice instead of libLanguageToollo.so
    # TODO reconsider ignoring directories
    version_candidates = list(filter(lambda s: (
        s
        and s != "255.255.255.255"
        and s != "0.0.0.0"
        and not s.startswith("127.0.0.")
        and not s.startswith("192.168.")
        and not s.startswith("802.")
    ), version_candidates))
    name_candidates = list(filter(lambda s: (
        s
        and not s.startswith("_")
    ), name_candidates))    
    if name_candidates and version_candidates:
        print(version_candidates)
        print(name_candidates)
    return []

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='identify',
        description='Attempt to generate potentially matching identifiers such as cpes and purls based on file contents',
        epilog=(
            "examples to try:"
            "- python OK"
            "- python3 OK"
            "- bash OK"
            "- perl OK"
            "- wget OK"
            "- curl OK"
            "- 7z (/usr/lib/7zip/7z) OK"
            "- libreoffice (/usr/lib/libreoffice/program/libLanguageToollo.so) OK"
        )
    )
    parser.add_argument(
        'paths',
        type=lambda p: Path(p).absolute(),
        nargs='+'
    )
    args = parser.parse_args()
    paths:List[Path] = args.paths
    # TODO Maybe only consider files that are executable or binary?
    for path in paths:
        if path.is_dir():
            subfiles = path.rglob("**/*")
            for subfile in subfiles:
                if subfile.is_file():
                    for identifier in identify(subfile):
                        print(identifier)
        else:
            for identifier in identify(path):
                print(identifier)
